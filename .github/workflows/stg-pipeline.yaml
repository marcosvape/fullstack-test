name: CI/CD for the project and terraform apply pipeline - STG

on:
  push:
    branches:
      - staging

jobs:
  build-dev:
    runs-on: ubuntu-latest
    steps:

      - name: Checkout source code
        uses: actions/checkout@v3

      - name: Build terraform module job
        run:
          docker image build -t terraform-infra:latest -f terraform_aws_environment/Dockerfile --build-arg TERRAFORM_CREDENTIALS="${{secrets.TERRAFORM_CREDENTIALS}}" .

      - name: Use Node.js
        uses: actions/setup-node@v2
        with:
          node-version: 15.x
      - name: Install dependencies
        run: |
          cd codebase/rdicidr-0.1.0
          npm install react-scripts
          npm install
          npm run lint
          npm install -g prettier
          npm run build

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
          aws-region: us-west-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build and push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: fullstack-test
          IMAGE_TAG: latest
        run: |
          docker image build -t 844909699887.dkr.ecr.us-west-1.amazonaws.com/fullstack-test:latest -f codebase/rdicidr-0.1.0/Dockerfile .
          docker push 844909699887.dkr.ecr.us-west-1.amazonaws.com/fullstack-test:latest

      - name: Redeploy ECS service to fetch latest image tag
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_KEY }}
          AWS_DEFAULT_REGION: us-west-1
        run: aws ecs update-service --cluster staging --service fullstack-test-service --force-new-deployment